#!/usr/bin/env python
# encoding: utf-8
'''
check_transcriptor_regulators -- shortdesc

check_transcriptor_regulators is a description

It defines classes_and_methods

@author:     user_name

@copyright:  2022 organization_name. All rights reserved.

@license:    license

@contact:    user_email
@deffield    updated: Updated
'''

import sys
import os, re
import optparse

from Bio import SeqIO
from utils.util import Utils
from constants.constants import Constants
from utils.util import TransFactors

__all__ = []
__version__ = 0.1
__date__ = '2022-11-07'
__updated__ = '2022-11-07'

DEBUG = 1
TESTRUN = 0
PROFILE = 0

utils = Utils()
constants = Constants()


def checkRequiredArguments(opts, parser):
	missing_options = []
	for option in parser.option_list:
		if re.match(r'^\[REQUIRED\]', option.help) and eval('opts.' + option.dest) == None:
			missing_options.extend(option._long_opts)
		if len(missing_options) > 0:
			parser.error('Missing REQUIRED parameters: ' + str(missing_options))

def main(argv=None):
	'''Command line options.'''

	"""
	rna_coding_R64-2-1_20150113.fasta, file
	Main path: /home/projects/ua/goncalo_sousa_phd
	-i /home/projects/ua/timepoints_vcf/samples.txt -p /home/projects/ua/timepoints_vcf/10_annot_vcf -o /home/projects/ua/timepoints_vcf/out_report.txt -r /home/projects/ua/timepoints_vcf/rna_coding_R64-2-1_20150113.fasta
	-i /home/projects/ua/timepoints_vcf_2/samples_ID.txt -p /home/projects/ua/timepoints_vcf_2/vcf -o /home/projects/ua/timepoints_vcf_2/out_report.txt -r /home/projects/ua/candida/compare_A_vs_B/ref/genomeA/C_albicans_SC5314_chrA_A22_chromosomes.fasta
	-i /home/projects/ua/timepoints_vcf_3/samples_ID.txt -p /home/projects/ua/timepoints_vcf_3/vcf -o /home/projects/ua/timepoints_vcf_3/out_report.txt
	"""

	class MyParser(optparse.OptionParser):
		def format_epilog(self, formatter):
			return self.epilog

	program_name = os.path.basename(sys.argv[0])
	program_version = "v0.2"
	program_build_date = "%s" % __updated__

	program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
	#program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
	program_longdesc = '''
$ module load coverage_from_bam
$ progression_time_points.py -i <samples_ID.txt> -p <path_to_vcfs> -o <output path>

samples_ID.txt header -> isol ID id_nextseq sample_group time_point
isol = comparison group - must be equal between samples to compare
ID = sample name that will be displayed in output files
id_nextseq = prefix of vcf files
sample_group = species
time_point = numeric value (1,2,3). 
Columns for sample comparison (equivalent to evolutionary time points)
'''

	program_license = "Copyright 2019 user_name (Universidade de Aveiro)											\
				Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

	if argv is None:
		argv = sys.argv[1:]
	
	# setup option parser
	
	parser = MyParser(version=program_version_string, epilog=program_longdesc, description=program_license)
	parser.add_option("-i", "--in", dest="infile", help="[REQUIRED] Transcription factors (fasta)", metavar="FILE")
	parser.add_option("-p", "--path_in", dest="path_in", help="[REQUIRED] set input path with VCF samples", metavar="FILE")
	parser.add_option("-r", "--reference_fasta", dest="reference_fasta", help="input fasta (reference)", metavar="FILE")
	parser.add_option("-a", "--annotation_file_gff", dest="annotation_file_gff", help="input gff (annotation), look gor genes", metavar="FILE")
	parser.add_option("-w", "--windown_size", dest="windown_size", help="Size of windows to analyse. Where the transcription factors are going to bind.")
	parser.add_option("-o", "--out", dest="outfile", help="[REQUIRED] set output path", metavar="FILE")
	
	# process options
	(opts, args) = parser.parse_args(argv)
	checkRequiredArguments(opts, parser)

	## show help and epilog
	if hasattr(opts, 'help') and opts.help:
		parser.print_help()
		sys.exit()

	if opts.infile:              print("infile Trnascriptor Factors  %s" % opts.infile)
	if opts.reference_fasta:     print("reference file               %s" % opts.reference_fasta)
	if opts.annotation_file_gff: print("annotation_file_gff          %s" % opts.annotation_file_gff)
	if opts.path_in:             print("path_in (with vcf)           %s" % opts.path_in)
	if opts.outfile:             print("outfile                      %s" % opts.outfile)

	# MAIN BODY #
	read_factors = TransFactors(opts.infile)

	### test all files and make correspondence with paths
	read_samples.test_vcfs(opts.path_in)

	### read vcf files
	read_samples.read_vcfs()
	
	### rad rna fasta
	if opts.rna_fasta: read_samples.read_rna_fasta(opts.rna_fasta)
	
	print("Done")


if __name__ == "__main__":
	sys.exit(main())
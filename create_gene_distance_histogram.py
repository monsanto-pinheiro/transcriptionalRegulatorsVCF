'''
Created on 04/12/2022

@author: mmp
'''
import re, os, sys
import optparse
from utils.util import Genes, Utils

__all__ = []
__version__ = 0.1
__date__ = '2022-11-07'
__updated__ = '2022-11-07'

utils = Utils()

def checkRequiredArguments(opts, parser):
	missing_options = []
	for option in parser.option_list:
		if re.match(r'^\[REQUIRED\]', option.help) and eval('opts.' + option.dest) == None:
			missing_options.extend(option._long_opts)
		if len(missing_options) > 0:
			parser.error('Missing REQUIRED parameters: ' + str(missing_options))
			
# $ module load samtools htslib bcftools mafft
def main(argv=None):
	'''Command line options.'''

	"""
	rna_coding_R64-2-1_20150113.fasta, file
	Main path: /home/projects/ua/goncalo_sousa_phd
	python3 ~/git/transcriptionalRegulatorsVCF/create_gene_distance_histogram.py -a <annotation gff file> -o <out file png>
	"""

	class MyParser(optparse.OptionParser):
		def format_epilog(self, formatter):
			return self.epilog

	program_name = os.path.basename(sys.argv[0])
	program_version = "v0.2"
	program_build_date = "%s" % __updated__

	program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
	#program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
	program_longdesc = '''
$ module load coverage_from_bam
$ create_gene_distance_histogram.py -a <annotation gff file> -o <out file png>
'''

	program_license = "Copyright 2019 user_name (Universidade de Aveiro)											\
				Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

	if argv is None:
		argv = sys.argv[1:]
	
	# setup option parser
	
	parser = MyParser(version=program_version_string, epilog=program_longdesc, description=program_license)
	parser.add_option("-a", "--annotation_file_gff", dest="annotation_file_gff", help="[REQUIRED] input gff (annotation), look gor genes", metavar="FILE")
	parser.add_option("-o", "--out", dest="outfile", help="[REQUIRED] set output file name", metavar="FILE")
	parser.add_option("-b", "--bin", dest="bin_histogram", help="set output file name", default=10)
	parser.add_option("-d", "--dis", dest="max_distance", help="set max distance between genes", default=6000)
	parser.add_option("-w", "--windown_size", dest="windown_size",
			help="Size of windows to analyse. Where the transcription factors are going to bind.",
			default=1000)

	# process options
	(opts, args) = parser.parse_args(argv)
	checkRequiredArguments(opts, parser)

	## show help and epilog
	if hasattr(opts, 'help') and opts.help:
		parser.print_help()
		sys.exit()
	
	if opts.annotation_file_gff: print("annotation_file_gff          %s" % opts.annotation_file_gff)
	if opts.outfile:             print("outfile                      %s" % opts.outfile)
	if opts.bin_histogram:       print("bin_histogram                %s" % opts.bin_histogram)
	if opts.max_distance:        print("max_distance                 %s" % opts.max_distance)
	if opts.windown_size:        print("windown_size                 %s" % opts.windown_size)
	
	utils.test_file_exists(opts.annotation_file_gff)
	
	### read all genes
	genes = Genes(opts.annotation_file_gff)
	genes.create_histogram(opts.outfile, int(opts.bin_histogram),
		int(opts.max_distance), int(opts.windown_size))
	
	print("File created: " + opts.outfile)

if __name__ == "__main__":
	sys.exit(main())
